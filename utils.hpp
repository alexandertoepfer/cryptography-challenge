#pragma once
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <sstream>
#include <bitset>
#include <limits>
#include <locale>
#include <iterator>
#include <algorithm>

typedef unsigned char u8;
typedef unsigned int u32;
typedef std::vector< std::vector< int > > matrix;

namespace utl {

    // Inverse confusion 0, 256 and 256, 512
    std::vector< matrix > confusion_reverse =
    {
        {
            {106},{26},{24,94},{89},{56},{86},{227},{195},
            {228},{95},{188},{144},{47},{223},{70},{},
            {88},{},{245},{42},{247},{191},{128},{10},
            {204},{221},{23},{246},{83,113},{131},{129},{4},
            {},{130},{240},{145},{48},{2},{112},{158},
            {7},{253},{232},{9},{118},{132,220},{222},{176},
            {81},{251},{200},{6,154},{140},{115},{99},{210},
            {110},{68},{197},{216},{148},{218},{},{230},
            {161},{162},{37},{117},{},{248},{238},{100},
            {18},{77,209},{43},{33},{125},{67},{146},{183},
            {189},{92},{82},{39},{149},{14},{104},{184,207},
            {193},{75},{},{215},{59},{15},{123},{198},
            {252},{121},{22},{40},{91},{239},{41,181},{214},
            {196},{80},{34},{},{62},{155},{51},{244},
            {233},{31},{32},{255},{119},{},{49},{127},
            {21,151},{157},{174},{192},{8},{236},{226},{103},
            {},{60},{165},{30},{142},{45},{65},{250},
            {185},{153},{72},{205},{71},{137,171},{96},{16},
            {186},{116},{61},{166,224},{3},{134},{76},{93},
            {180},{213},{234},{87},{187},{122},{},{201},
            {69},{53},{58,243},{172},{152},{50},{168},{150},
            {90},{133},{28},{101},{0},{97},{173},{},
            {13},{},{85},{5},{120},{219},{175},{208},
            {135},{242},{66},{217},{11,194},{178},{229},{126},
            {38},{44},{57},{136},{159},{164},{55,64},{249},
            {235},{27},{105},{},{203},{170},{102},{46},
            {73},{1},{17},{20},{19},{},{143},{52},
            {111,237},{231},{63},{139},{114},{167},{211},{163},
            {84},{141},{206},{107},{},{179},{78},{190},
            {35},{36,124},{79},{202},{54},{108},{199},{169},
            {29},{109},{25},{182},{241},{212},{12},{98,254},
            {138},{160},{},{156},{225},{177},{74},{147}
        },
        {
            {53},{151},{},{87},{255},{244},{152},{204},
            {180},{234},{169},{227},{26},{41},{},{198},
            {210},{38},{31},{110},{102},{},{243},{96},
            {45},{},{184},{126},{253},{183},{142},{208},
            {190},{88},{44},{148},{132,251},{231},{40},{15},
            {33,209},{172},{54},{177},{0},{215},{103},{80},
            {62},{76},{131},{64,229},{42},{146},{230},{122},
            {238},{217},{70},{49},{128},{221},{71},{14,111},
            {25},{175},{94,174},{18},{140},{193},{30},{105},
            {189},{165},{160},{173},{7},{228},{16,207},{89},
            {13},{47},{27},{246},{118},{106,154},{158},{150},
            {157},{11,212},{32},{236},{201},{145},{52},{72},
            {226},{57},{170},{197},{},{216},{43},{83},
            {},{147},{164},{124},{211},{67},{20},{46},
            {166},{149},{2},{},{219},{65},{182},{205},
            {84},{225},{114},{23},{24},{139},{188},{},
            {101},{112},{135},{9},{220},{79},{28},{},
            {6},{4},{162},{},{161},{133},{168},{56},
            {},{120},{81},{194},{115},{39},{59},{1},
            {252},{22},{155},{48},{},{73},{239},{77},
            {104},{69,181},{250},{99},{156},{85},{5},{121},
            {34},{75},{78},{86},{200},{91,254},{17},{82},
            {199},{127},{218},{60},{136},{117},{113,129},{178},
            {185},{90},{58,202},{35},{232},{223},{245},{119},
            {240},{29},{248},{196},{107},{167},{249},{159,224},
            {68},{125},{12},{36,176},{187},{3},{179},{235},
            {21,116},{61},{242},{213},{143},{19},{163},{97},
            {100},{130},{50},{138},{63,171},{214},{195},{203},
            {233},{},{237},{186},{153},{109},{191},{206},
            {8},{66},{144},{10},{51},{},{98},{241},
            {37},{123},{134},{93},{222},{55},{},{247},
            {192},{137},{},{141},{95},{74},{92},{108}
        }
    };

    // Part-reversal of diffusion
    std::vector< matrix > iterative_diffusion =
    {
        {
            {0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1},
            {0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1},
            {0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1},
            {0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0},
            {0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0},
            {0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1},
            {0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1},
            {0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1},
            {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        }
    };

    // Last part of diffusion reversal
    matrix gaussian_diffusion = {
    {1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,1},
    {0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0},
    {0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0},
    {0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0},
    {0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0},
    {0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1},
    {0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1},
    {0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1},
    {0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    };

    u8 partlySafe01[] = {
    0x02, 0x03, 0x06, 0x07, 0x12, 0x13, 0x16, 0x17,
    0x22, 0x23, 0x26, 0x27, 0x32, 0x33, 0x36, 0x37,
    0x42, 0x43, 0x46, 0x47, 0x52, 0x53, 0x56, 0x57,
    0x62, 0x63, 0x66, 0x67, 0x72, 0x73, 0x76, 0x77,
    0x82, 0x83, 0x86, 0x87, 0x92, 0x93, 0x96, 0x97,
    0xa2, 0xa3, 0xa6, 0xa7, 0xb2, 0xb3, 0xb6, 0xb7,
    0xc2, 0xc3, 0xc6, 0xc7, 0xd2, 0xd3, 0xd6, 0xd7,
    0xe2, 0xe3, 0xe6, 0xe7, 0xf2, 0xf3, 0xf6, 0xf7
    };

    u8 partlySafe10[] = {
    0x08, 0x09, 0x0c, 0x0d, 0x18, 0x19, 0x1c, 0x1d,
    0x28, 0x29, 0x2c, 0x2d, 0x38, 0x39, 0x3c, 0x3d,
    0x48, 0x49, 0x4c, 0x4d, 0x58, 0x59, 0x5c, 0x5d,
    0x68, 0x69, 0x6c, 0x6d, 0x78, 0x79, 0x7c, 0x7d,
    0x88, 0x89, 0x8c, 0x8d, 0x98, 0x99, 0x9c, 0x9d,
    0xa8, 0xa9, 0xac, 0xad, 0xb8, 0xb9, 0xbc, 0xbd,
    0xc8, 0xc9, 0xcc, 0xcd, 0xd8, 0xd9, 0xdc, 0xdd,
    0xe8, 0xe9, 0xec, 0xed, 0xf8, 0xf9, 0xfc, 0xfd
    };

    u8 safe01[] = {
    0x03, 0x07, 0x12, 0x13, 0x22, 0x23, 0x32, 0x36,
    0x46, 0x47, 0x52, 0x56, 0x63, 0x67, 0x76, 0x77,
    0x82, 0x83, 0x92, 0x96, 0xa3, 0xa7, 0xb2, 0xb3,
    0xc3, 0xc7, 0xd6, 0xd7, 0xe6, 0xe7, 0xf2, 0xf6,
    };

    u8 safe10[] = {
    0x0c, 0x0d, 0x19, 0x1d, 0x28, 0x2c, 0x3c, 0x3d,
    0x48, 0x4c, 0x58, 0x59, 0x68, 0x69, 0x79, 0x7d,
    0x88, 0x8c, 0x9c, 0x9d, 0xac, 0xad, 0xb9, 0xbd,
    0xc8, 0xc9, 0xd9, 0xdd, 0xe8, 0xec, 0xf8, 0xf9,
    };

    class PasteCharClass {
        public:
            PasteCharClass() = default;

            std::string operator()() {
                std::string tmp = this->sstream.str();
                this->sstream.str( "" );
                return tmp;
            }

            template < typename T, typename... Types >
            std::string operator()( T var, Types... args ) {
                this->sstream << var;
                return this->operator()( args... ) ;
            }

        private:
            std::stringstream sstream;
    };

    PasteCharClass pasteChr;

    template< class chars, class traits >
    std::basic_ostream< chars, traits >& base16( std::basic_ostream< chars, traits >& os ) {
        os << std::setfill( '0' ) << std::setw( 2 ) << std::right << std::hex;
        return os;
    }

    template< class chars, class traits >
    std::basic_ostream< chars, traits >& base10( std::basic_ostream< chars, traits >& os ) {
        os << std::setfill( ' ' ) << std::setw( 0 ) << std::left << std::dec;
        return os;
    }

    template< typename T, size_t size = 32 >
    void arrCopy( T source[ size ], T destination[ size ] ) {
        std::copy( source, source + size, destination );
    }

    template< typename T, typename ... Args, size_t size = 32 >
    void arrCopy( T source[ size ], T destination[ size ], Args... args ) {
        std::copy( source, source + size, destination );
        arrCopy( source, args... );
    }

    std::string pasteVec( std::vector< int >& vector ) {
        std::stringstream vector_string;
        const char* del = ",";
        vector_string << '{';
        if( !vector.empty() ) {
            std::copy( vector.begin(), vector.end() - 1, std::ostream_iterator< int >( vector_string, del ) );
            vector_string << vector.back();
        }
        vector_string << '}';
        return vector_string.str();
    }

    void fillMatrix( matrix& matrix1, int ( *set )( int, int ) ) {
        for( size_t i = 0; i < 32; i++ ) {
            std::vector< int > row;
            for( size_t j = 0; j < 32; j++ ) {
                row.push_back( set( i, j ) );
            }
            matrix1.push_back( row );
        }
    };

    std::string pasteMat( matrix& matrix ) {
        std::stringstream matrix_string;
        for( size_t i = 0; i < matrix.size(); i++ ) {
            matrix_string << pasteVec( matrix[ i ] ) << ',' << std::endl;
        }
        return matrix_string.str();
    }

    std::string pasteArr( u8* array, size_t length = 32 ) {
        std::stringstream array_string;
        array_string << "0x" << ' ';
        for( size_t i = 0; i < length; i++ ) {
            array_string << base16 << ( int )array[ i ] << ' ';
        }
        return array_string.str();
    }

    std::string pasteArrChr( u8* array, size_t length = 32 ) {
        std::stringstream array_string;
        for( size_t i = 0; i < length; i++ ) {
            array_string << ( char )array[ i ];
        }
        return array_string.str();
    }

    std::string pasteArr( bool* array, int size = 8 ) {
        std::stringstream binary_string;
        for( size_t i = size - 1; ; --i ) {
            binary_string << array[ i ];
            if( !i ) break;
        }
        return binary_string.str();
    }

    bool* toBin( u8 var ) {
        bool* binary = new bool[ 8 ];
        for( int n = 0; n < 8; ++n )
            binary[ n ] = ( var >> n ) & 1;
        return binary;
    }

    void printBin( u8& var ) {
        std::cout << std::bitset< 8 >( ( int )var ).to_string() << std::endl;
    }

    template< class ... Args >
    void printBin( u8& var, Args... args ) {
        std::cout << std::bitset< 8 >( ( int )var ).to_string() << std::endl;
        printBin( args... );
    }

};
